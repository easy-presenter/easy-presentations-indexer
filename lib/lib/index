#!/bin/bash

#lib-info: helps building the presentation index

source "$TERMINAL_APP_LIB_PATH/color"

function index_file_write {
  __file="$1"
  __depth=$2
  __path_relative="$4"
  __name="$3"

  printf '%*s - [%s](%s) \n' $__depth ' ' "$__path_relative" "$__name" >> "$__file"
}

function index_file_init {
  __index_file="$1"
  __headline="$2"

  file_clear "$__index_file"

  if [ "x$__headline" != "x" ];
  then
    file_append "$__index_file" "# $__headline"
  fi

  file_append_newline "$__index_file"
}

function index_name_from_path_or_page {
  __folder_to_scan="$1"
  __relative_path="$2"
  __possible_folder_page="$__folder_to_scan/00_teaser.md"

  # a README.md insite of a folder means: is the first slide
  if [ -f "$__folder_to_scan" ];
  then

    __entry_name=$(index_name_from_file "$__folder_to_scan")

  elif [ -f "$__possible_folder_page" ];
  then

    __entry_name=$(index_name_from_file "$__possible_folder_page")

  # or use the path name as name
  else
    __entry_name=$(file_path_to_name "$__relative_path")
  fi

  echo "$__entry_name"
}

function index_name_from_file {
  __file_to_grap_for_headline="$1"

  __entry_name=$(cat "$__file_to_grap_for_headline" | grep "# "  | head -1)
  # we have more then 2 chars, so more then '# ', use the followinf chars
  if [ ${#__entry_name} -ge 3 ];
  then
    echo ${__entry_name:2}
  else
    # or use the path name as name
    echo $(file_path_to_name "$__relative_path")
  fi
}
